{"version":3,"file":"vue-upload-component.min.js","sources":["../src/utils/request.js","../src/chunk/ChunkUploadHandler.js","../src/InputFile.vue","../src/FileUpload.vue"],"sourcesContent":["/**\n * Creates a XHR request\n *\n * @param {Object} options\n */\nexport const createRequest = (options) => {\n  const xhr = new XMLHttpRequest()\n  xhr.responseType = 'json'\n  xhr.open(options.method || 'GET', options.url)\n  if (options.headers) {\n    Object.keys(options.headers).forEach(key => {\n      xhr.setRequestHeader(key, options.headers[key])\n    })\n  }\n\n  return xhr\n}\n\n/**\n * Sends a XHR request with certain body\n *\n * @param {XMLHttpRequest} xhr\n * @param {Object} body\n */\nexport const sendRequest = (xhr, body) => {\n  return new Promise((resolve, reject) => {\n    xhr.onload = () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        resolve(xhr.response)\n      } else {\n        reject(xhr.response)\n      }\n    }\n    xhr.onerror = () => reject(xhr.response)\n    xhr.send(JSON.stringify(body))\n  })\n}\n\n/**\n * Sends a XHR request with certain form data\n *\n * @param {XMLHttpRequest} xhr\n * @param {Object} data\n */\nexport const sendFormRequest = (xhr, data) => {\n  const body = new FormData()\n  for (var name in data) {\n    body.append(name, data[name])\n  }\n\n  return new Promise((resolve, reject) => {\n    xhr.onload = () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        resolve(xhr.response)\n      } else {\n        reject(xhr.response)\n      }\n    }\n    xhr.onerror = () => reject(xhr.response)\n    xhr.send(body)\n  })\n}\n\n/**\n * Creates and sends XHR request\n *\n * @param {Object} options\n *\n * @returns Promise\n */\nexport default function (options) {\n  const xhr = createRequest(options)\n\n  return sendRequest(xhr, options.body)\n}\n","import {\n  default as request,\n  createRequest,\n  sendFormRequest\n} from '../utils/request'\n\nexport default class ChunkUploadHandler {\n  /**\n   * Constructor\n   *\n   * @param {File} file\n   * @param {Object} options\n   */\n  constructor (file, options) {\n    this.file = file\n    this.options = options\n  }\n\n  /**\n   * Gets the max retries from options\n   */\n  get maxRetries () {\n    return parseInt(this.options.maxRetries)\n  }\n\n  /**\n   * Gets the max number of active chunks being uploaded at once from options\n   */\n  get maxActiveChunks () {\n    return parseInt(this.options.maxActive)\n  }\n\n  /**\n   * Gets the file type\n   */\n  get fileType () {\n    return this.file.type\n  }\n\n  /**\n   * Gets the file size\n   */\n  get fileSize () {\n    return this.file.size\n  }\n\n  /**\n   * Gets action (url) to upload the file\n   */\n  get action () {\n    return this.options.action || null\n  }\n\n  /**\n   * Gets the body to be merged when sending the request in start phase\n   */\n  get startBody () {\n    return this.options.startBody || {}\n  }\n\n  /**\n   * Gets the body to be merged when sending the request in upload phase\n   */\n  get uploadBody () {\n    return this.options.uploadBody || {}\n  }\n\n  /**\n   * Gets the body to be merged when sending the request in finish phase\n   */\n  get finishBody () {\n    return this.options.finishBody || {}\n  }\n\n  /**\n   * Gets the headers of the requests from options\n   */\n  get headers () {\n    return this.options.headers || {}\n  }\n\n  /**\n   * Whether it's ready to upload files or not\n   */\n  get readyToUpload () {\n    return !!this.chunks\n  }\n\n  /**\n   * Gets the progress of the chunk upload\n   * - Gets all the completed chunks\n   * - Gets the progress of all the chunks that are being uploaded\n   */\n  get progress () {\n    const completedProgress = (this.chunksUploaded.length / this.chunks.length) * 100\n    const uploadingProgress = this.chunksUploading.reduce((progress, chunk) => {\n      return progress + ((chunk.progress | 0) / this.chunks.length)\n    }, 0)\n\n    return Math.min(completedProgress + uploadingProgress, 100)\n  }\n\n  /**\n   * Gets all the chunks that are pending to be uploaded\n   */\n  get chunksToUpload () {\n    return this.chunks.filter(chunk => {\n      return !chunk.active && !chunk.uploaded\n    })\n  }\n\n  /**\n   * Whether there are chunks to upload or not\n   */\n  get hasChunksToUpload () {\n    return this.chunksToUpload.length > 0\n  }\n\n  /**\n   * Gets all the chunks that are uploading\n   */\n  get chunksUploading () {\n    return this.chunks.filter(chunk => {\n      return !!chunk.xhr && !!chunk.active\n    })\n  }\n\n  /**\n   * Gets all the chunks that have finished uploading\n   */\n  get chunksUploaded () {\n    return this.chunks.filter(chunk => {\n      return !!chunk.uploaded\n    })\n  }\n\n  /**\n   * Creates all the chunks in the initial state\n   */\n  createChunks () {\n    this.chunks = []\n\n    let start = 0\n    let end = this.chunkSize\n    while (start < this.fileSize) {\n      this.chunks.push({\n        blob: this.file.file.slice(start, end),\n        startOffset: start,\n        active: false,\n        retries: this.maxRetries\n      })\n      start = end\n      end = start + this.chunkSize\n    }\n  }\n\n  /**\n   * Updates the progress of the file with the handler's progress\n   */\n  updateFileProgress () {\n    this.file.progress = this.progress\n  }\n\n  /**\n   * Paues the upload process\n   * - Stops all active requests\n   * - Sets the file not active\n   */\n  pause () {\n    this.file.active = false\n    this.stopChunks()\n  }\n\n  /**\n   * Stops all the current chunks\n   */\n  stopChunks () {\n    this.chunksUploading.forEach(chunk => {\n      chunk.xhr.abort()\n      chunk.active = false\n    })\n  }\n\n  /**\n   * Resumes the file upload\n   * - Sets the file active\n   * - Starts the following chunks\n   */\n  resume () {\n    this.file.active = true\n    this.startChunking()\n  }\n\n  /**\n   * Starts the file upload\n   *\n   * @returns Promise\n   * - resolve  The file was uploaded\n   * - reject   The file upload failed\n   */\n  upload () {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve\n      this.reject = reject\n    })\n    this.start()\n\n    return this.promise\n  }\n\n  /**\n   * Start phase\n   * Sends a request to the backend to initialise the chunks\n   */\n  start () {\n    request({\n      method: 'POST',\n      headers: Object.assign({}, this.headers, {\n        'Content-Type': 'application/json'\n      }),\n      url: this.action,\n      body: Object.assign(this.startBody, {\n        phase: 'start',\n        mime_type: this.fileType,\n        size: this.fileSize\n      })\n    }).then(res => {\n      if (res.status !== 'success') {\n        this.file.response = res\n        return this.reject('server')\n      }\n\n      this.sessionId = res.data.session_id\n      this.chunkSize = res.data.end_offset\n\n      this.createChunks()\n      this.startChunking()\n    }).catch(res => {\n      this.file.response = res\n      this.reject('server')\n    })\n  }\n\n  /**\n   * Starts to upload chunks\n   */\n  startChunking () {\n    for (let i = 0; i < this.maxActiveChunks; i++) {\n      this.uploadNextChunk()\n    }\n  }\n\n  /**\n   * Uploads the next chunk\n   * - Won't do anything if the process is paused\n   * - Will start finish phase if there are no more chunks to upload\n   */\n  uploadNextChunk () {\n    if (this.file.active) {\n      if (this.hasChunksToUpload) {\n        return this.uploadChunk(this.chunksToUpload[0])\n      }\n\n      if (this.chunksUploading.length === 0) {\n        return this.finish()\n      }\n    }\n  }\n\n  /**\n   * Uploads a chunk\n   * - Sends the chunk to the backend\n   * - Sets the chunk as uploaded if everything went well\n   * - Decreases the number of retries if anything went wrong\n   * - Fails if there are no more retries\n   *\n   * @param {Object} chunk\n   */\n  uploadChunk (chunk) {\n    chunk.progress = 0\n    chunk.active = true\n    this.updateFileProgress()\n    chunk.xhr = createRequest({\n      method: 'POST',\n      headers: this.headers,\n      url: this.action\n    })\n\n    chunk.xhr.upload.addEventListener('progress', function (evt) {\n      if (evt.lengthComputable) {\n        chunk.progress = Math.round(evt.loaded / evt.total * 100)\n      }\n    }, false)\n\n    sendFormRequest(chunk.xhr, Object.assign(this.uploadBody, {\n      phase: 'upload',\n      session_id: this.sessionId,\n      start_offset: chunk.startOffset,\n      chunk: chunk.blob\n    })).then(res => {\n      chunk.active = false\n      if (res.status === 'success') {\n        chunk.uploaded = true\n      } else {\n        if (chunk.retries-- <= 0) {\n          this.stopChunks()\n          return this.reject('upload')\n        }\n      }\n\n      this.uploadNextChunk()\n    }).catch(() => {\n      chunk.active = false\n      if (chunk.retries-- <= 0) {\n        this.stopChunks()\n        return this.reject('upload')\n      }\n\n      this.uploadNextChunk()\n    })\n  }\n\n  /**\n   * Finish phase\n   * Sends a request to the backend to finish the process\n   */\n  finish () {\n    this.updateFileProgress()\n\n    request({\n      method: 'POST',\n      headers: Object.assign({}, this.headers, {\n        'Content-Type': 'application/json'\n      }),\n      url: this.action,\n      body: Object.assign(this.finishBody, {\n        phase: 'finish',\n        session_id: this.sessionId\n      })\n    }).then(res => {\n      this.file.response = res\n      if (res.status !== 'success') {\n        return this.reject('server')\n      }\n\n      this.resolve(res)\n    }).catch(res => {\n      this.file.response = res\n      this.reject('server')\n    })\n  }\n}\n","<template>\n  <input\n    type=\"file\"\n    :name=\"$parent.name\"\n    :id=\"$parent.inputId || $parent.name\"\n    :accept=\"$parent.accept\"\n    :capture=\"$parent.capture\"\n    @change=\"change\"\n    :webkitdirectory=\"$parent.directory && $parent.features.directory\"\n    :directory=\"$parent.directory && $parent.features.directory\"\n    :multiple=\"$parent.multiple && $parent.features.html5\"\n  />\n</template>\n<script>\nexport default {\n  methods: {\n    change(e) {\n      this.$destroy()\n      this.$parent.addInputFile(e.target)\n      // eslint-disable-next-line\n      new this.constructor({\n        parent: this.$parent,\n        el: this.$el,\n      })\n    }\n  }\n}\n</script>\n","<template>\n  <label :class=\"className\">\n    <slot></slot>\n    <input-file></input-file>\n  </label>\n</template>\n<style>\n.file-uploads {\n  overflow: hidden;\n  position: relative;\n  text-align: center;\n  display: inline-block;\n}\n.file-uploads.file-uploads-html4 input[type=\"file\"] {\n  opacity: 0;\n  font-size: 20em;\n  z-index: 1;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n.file-uploads.file-uploads-html5 input[type=\"file\"] {\n  overflow: hidden;\n  position: fixed;\n  width: 1px;\n  height: 1px;\n  z-index: -1;\n  opacity: 0;\n}\n</style>\n<script>\nimport ChunkUploadDefaultHandler from './chunk/ChunkUploadHandler'\nimport InputFile from './InputFile.vue'\n\nconst CHUNK_DEFAULT_OPTIONS = {\n  headers: {},\n  action: '',\n  minSize: 1048576,\n  maxActive: 3,\n  maxRetries: 5,\n\n  handler: ChunkUploadDefaultHandler\n}\n\nexport default {\n  components: {\n    InputFile,\n  },\n  props: {\n    inputId: {\n      type: String,\n    },\n\n    name: {\n      type: String,\n      default: 'file',\n    },\n\n    accept: {\n      type: String,\n    },\n\n    capture: {\n    },\n\n    multiple: {\n      type: Boolean,\n    },\n\n    maximum: {\n      type: Number,\n      default() {\n        return this.multiple ? 0 : 1\n      }\n    },\n\n    addIndex: {\n      type: [Boolean, Number],\n    },\n\n    directory: {\n      type: Boolean,\n    },\n\n    postAction: {\n      type: String,\n    },\n\n    putAction: {\n      type: String,\n    },\n\n    customAction: {\n      type: Function,\n    },\n\n    headers: {\n      type: Object,\n      default: Object,\n    },\n\n    data: {\n      type: Object,\n      default: Object,\n    },\n\n    timeout: {\n      type: Number,\n      default: 0,\n    },\n\n\n    drop: {\n      default: false,\n    },\n\n    dropDirectory: {\n      type: Boolean,\n      default: true,\n    },\n\n    size: {\n      type: Number,\n      default: 0,\n    },\n\n    extensions: {\n      default: Array,\n    },\n\n\n    value: {\n      type: Array,\n      default: Array,\n    },\n\n    thread: {\n      type: Number,\n      default: 1,\n    },\n\n    // Chunk upload enabled\n    chunkEnabled: {\n      type: Boolean,\n      default: false\n    },\n\n    // Chunk upload properties\n    chunk: {\n      type: Object,\n      default: () => {\n        return CHUNK_DEFAULT_OPTIONS\n      }\n    }\n  },\n\n  data() {\n    return {\n      files: this.value,\n      features: {\n        html5: true,\n        directory: false,\n        drag: false,\n      },\n\n      active: false,\n      dropActive: false,\n\n      uploading: 0,\n\n      destroy: false,\n    }\n  },\n\n\n  /**\n   * mounted\n   * @return {[type]} [description]\n   */\n  mounted() {\n    let input = document.createElement('input')\n    input.type = 'file'\n    input.multiple = true\n\n    // html5 特征\n    if (window.FormData && input.files) {\n      // 上传目录特征\n      if (typeof input.webkitdirectory === 'boolean' || typeof input.directory === 'boolean') {\n        this.features.directory = true\n      }\n\n      // 拖拽特征\n      if (this.features.html5 && typeof input.ondrop !== 'undefined') {\n        this.features.drop = true\n      }\n    } else {\n      this.features.html5 = false\n    }\n\n    // files 定位缓存\n    this.maps = {}\n\n    this.$nextTick(function () {\n\n      // 更新下父级\n      if (this.$parent) {\n        this.$parent.$forceUpdate()\n      }\n\n      // 拖拽渲染\n      this.watchDrop(this.drop)\n    })\n  },\n\n  /**\n   * beforeDestroy\n   * @return {[type]} [description]\n   */\n  beforeDestroy() {\n    // 已销毁\n    this.destroy = true\n\n    // 设置成不激活\n    this.active = false\n  },\n\n  computed: {\n    /**\n     * uploading 正在上传的线程\n     * @return {[type]} [description]\n     */\n\n    /**\n     * uploaded 文件列表是否全部已上传\n     * @return {[type]} [description]\n     */\n    uploaded() {\n      let file\n      for (let i = 0; i < this.files.length; i++) {\n        file = this.files[i]\n        if (file.fileObject && !file.error && !file.success) {\n          return false\n        }\n      }\n      return true\n    },\n\n    chunkOptions () {\n      return Object.assign(CHUNK_DEFAULT_OPTIONS, this.chunk)\n    },\n\n    className() {\n      return [\n        'file-uploads',\n        this.features.html5 ? 'file-uploads-html5' : 'file-uploads-html4',\n        this.features.directory && this.directory ? 'file-uploads-directory' : undefined,\n        this.features.drop && this.drop ? 'file-uploads-drop' : undefined,\n      ]\n    }\n  },\n\n\n  watch: {\n    active(active) {\n      this.watchActive(active)\n    },\n\n    dropActive() {\n      if (this.$parent) {\n        this.$parent.$forceUpdate()\n      }\n    },\n\n    drop(value) {\n      this.watchDrop(value)\n    },\n\n    value(files) {\n      if (this.files === files) {\n        return\n      }\n      this.files = files\n\n      let oldMaps = this.maps\n\n      // 重写 maps 缓存\n      this.maps = {}\n      for (let i = 0; i < this.files.length; i++) {\n        let file = this.files[i]\n        this.maps[file.id] = file\n      }\n\n      // add, update\n      for (let key in this.maps) {\n        let newFile = this.maps[key]\n        let oldFile = oldMaps[key]\n        if (newFile !== oldFile) {\n          this.emitFile(newFile, oldFile)\n        }\n      }\n\n      // delete\n      for (let key in oldMaps) {\n        if (!this.maps[key]) {\n          this.emitFile(undefined, oldMaps[key])\n        }\n      }\n    },\n  },\n\n  methods: {\n\n    // 清空\n    clear() {\n      if (this.files.length) {\n        let files = this.files\n        this.files = []\n\n        // 定位\n        this.maps = {}\n\n        // 事件\n        this.emitInput()\n        for (let i = 0; i < files.length; i++) {\n          this.emitFile(undefined, files[i])\n        }\n      }\n      return true\n    },\n\n    // 选择\n    get(id) {\n      if (!id) {\n        return false\n      }\n\n      if (typeof id === 'object') {\n        return this.maps[id.id] || false\n      }\n\n      return this.maps[id] || false\n    },\n\n    // 添加\n    add(_files, index = this.addIndex) {\n      let files = _files\n      let isArray = files instanceof Array\n\n      // 不是数组整理成数组\n      if (!isArray) {\n        files = [files]\n      }\n\n      // 遍历规范对象\n      let addFiles = []\n      for (let i = 0; i < files.length; i++) {\n        let file = files[i]\n        if (this.features.html5 && file instanceof Blob) {\n          file = {\n            file,\n            size: file.size,\n            name: file.webkitRelativePath || file.relativePath || file.name || 'unknown',\n            type: file.type,\n          }\n        }\n        let fileObject = false\n        if (file.fileObject === false) {\n          // false\n        } else if (file.fileObject) {\n          fileObject = true\n        } else if (typeof Element !== 'undefined' && file.el instanceof Element) {\n          fileObject = true\n        } else if (typeof Blob !== 'undefined' && file.file instanceof Blob) {\n          fileObject = true\n        }\n        if (fileObject) {\n          file = {\n            fileObject: true,\n            size: -1,\n            name: 'Filename',\n            type: '',\n            active: false,\n            error: '',\n            success: false,\n            putAction: this.putAction,\n            postAction: this.postAction,\n            timeout: this.timeout,\n            ...file,\n            response: {},\n\n            progress: '0.00',          // 只读\n            speed: 0,                  // 只读\n            // xhr: false,                // 只读\n            // iframe: false,             // 只读\n          }\n\n          file.data = {\n            ...this.data,\n            ...file.data ? file.data : {},\n          }\n\n          file.headers = {\n            ...this.headers,\n            ...file.headers ? file.headers : {},\n          }\n        }\n\n        // 必须包含 id\n        if (!file.id) {\n          file.id = Math.random().toString(36).substr(2)\n        }\n\n        if (this.emitFilter(file, undefined)) {\n          continue\n        }\n\n        // 最大数量限制\n        if (this.maximum > 1 && (addFiles.length + this.files.length) >= this.maximum) {\n          break\n        }\n\n        addFiles.push(file)\n\n        // 最大数量限制\n        if (this.maximum === 1) {\n          break\n        }\n      }\n\n      // 没有文件\n      if (!addFiles.length) {\n        return false\n      }\n\n      // 如果是 1 清空\n      if (this.maximum === 1) {\n        this.clear()\n      }\n\n\n      // 添加进去 files\n      let newFiles\n      if (index === true || index === 0) {\n        newFiles = addFiles.concat(this.files)\n      } else if (index) {\n        newFiles = addFiles.concat([])\n        newFiles.splice(index, 0, addFiles)\n      } else {\n        newFiles = this.files.concat(addFiles)\n      }\n\n      this.files = newFiles\n\n      // 定位\n      for (let i = 0; i < addFiles.length; i++) {\n        let file = addFiles[i]\n        this.maps[file.id] = file\n      }\n\n      // 事件\n      this.emitInput()\n      for (let i = 0; i < addFiles.length; i++) {\n        this.emitFile(addFiles[i], undefined)\n      }\n\n      return isArray ? addFiles : addFiles[0]\n    },\n\n\n\n    // 添加表单文件\n    addInputFile(el) {\n      let files = []\n      if (el.files) {\n        for (let i = 0; i < el.files.length; i++) {\n          let file = el.files[i]\n          files.push({\n            size: file.size,\n            name: file.webkitRelativePath || file.relativePath || file.name,\n            type: file.type,\n            file,\n            el\n          })\n        }\n      } else {\n        files.push({\n          name: el.value.replace(/^.*?([^\\/\\\\\\r\\n]+)$/, '$1'),\n          el,\n        })\n      }\n      return this.add(files)\n    },\n\n\n    // 添加 DataTransfer\n    addDataTransfer(dataTransfer) {\n      let files = []\n      if (dataTransfer.items && dataTransfer.items.length) {\n        let items = []\n        for (let i = 0; i < dataTransfer.items.length; i++) {\n          let item = dataTransfer.items[i]\n          if (item.getAsEntry) {\n            item = item.getAsEntry() || item.getAsFile()\n          } else if (item.webkitGetAsEntry) {\n            item = item.webkitGetAsEntry() || item.getAsFile()\n          } else {\n            item = item.getAsFile()\n          }\n          if (item) {\n            items.push(item)\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          let forEach = (i) => {\n            let item = items[i]\n            // 结束 文件数量大于 最大数量\n            if (!item || (this.maximum > 0 && files.length >= this.maximum)) {\n              return resolve(this.add(files))\n            }\n            this.getEntry(item).then(function (results) {\n              files.push(...results)\n              forEach(i + 1)\n            })\n          }\n          forEach(0)\n        })\n      }\n\n      if (dataTransfer.files.length) {\n        for (let i = 0; i < dataTransfer.files.length; i++) {\n          files.push(dataTransfer.files[i])\n          if (this.maximum > 0 && files.length >= this.maximum) {\n            break\n          }\n        }\n        return Promise.resolve(this.add(files))\n      }\n\n      return Promise.resolve([])\n    },\n\n\n    // 获得 entry\n    getEntry(entry, path = '') {\n      return new Promise((resolve, reject) => {\n        if (entry.isFile) {\n          entry.file(function (file) {\n            resolve([\n              {\n                size: file.size,\n                name: path + file.name,\n                type: file.type,\n                file,\n              }\n            ])\n          })\n        } else if (entry.isDirectory && this.dropDirectory) {\n          let files = []\n          let dirReader = entry.createReader()\n          let readEntries = () => {\n            dirReader.readEntries((entries) => {\n              let forEach = (i) => {\n                if ((!entries[i] && i === 0) || (this.maximum > 0 && files.length >= this.maximum)) {\n                  return resolve(files)\n                }\n                if (!entries[i]) {\n                  return readEntries()\n                }\n                this.getEntry(entries[i], path + entry.name + '/').then((results) => {\n                  files.push(...results)\n                  forEach(i + 1)\n                })\n              }\n              forEach(0)\n            })\n          }\n          readEntries()\n        } else {\n          resolve([])\n        }\n      })\n    },\n\n\n    replace(id1, id2) {\n      let file1 = this.get(id1)\n      let file2 = this.get(id2)\n      if (!file1 || !file2 || file1 === file2) {\n        return false\n      }\n      let files = this.files.concat([])\n      let index1 = files.indexOf(file1)\n      let index2 = files.indexOf(file2)\n      if (index1 === -1 || index2 === -1) {\n        return false\n      }\n      files[index1] = file2\n      files[index2] = file1\n      this.files = files\n      this.emitInput()\n      return true\n    },\n\n    // 移除\n    remove(id) {\n      let file = this.get(id)\n      if (file) {\n        if (this.emitFilter(undefined, file)) {\n          return false\n        }\n        let files = this.files.concat([])\n        let index = files.indexOf(file)\n        if (index === -1) {\n          console.error('remove', file)\n          return false\n        }\n        files.splice(index, 1)\n        this.files = files\n\n        // 定位\n        delete this.maps[file.id]\n\n        // 事件\n        this.emitInput()\n        this.emitFile(undefined, file)\n      }\n      return file\n    },\n\n    // 更新\n    update(id, data) {\n      let file = this.get(id)\n      if (file) {\n        let newFile = {\n          ...file,\n          ...data\n        }\n        // 停用必须加上错误\n        if (file.fileObject && file.active && !newFile.active && !newFile.error && !newFile.success) {\n          newFile.error = 'abort'\n        }\n\n        if (this.emitFilter(newFile, file)) {\n          return false\n        }\n\n        let files = this.files.concat([])\n        let index = files.indexOf(file)\n        if (index === -1) {\n          console.error('update', file)\n          return false\n        }\n        files.splice(index, 1, newFile)\n        this.files = files\n\n        // 删除  旧定位 写入 新定位 （已便支持修改id)\n        delete this.maps[file.id]\n        this.maps[newFile.id] = newFile\n\n        // 事件\n        this.emitInput()\n        this.emitFile(newFile, file)\n        return newFile\n      }\n      return false\n    },\n\n\n\n    // 预处理 事件 过滤器\n    emitFilter(newFile, oldFile) {\n      let isPrevent = false\n      this.$emit('input-filter', newFile, oldFile, function () {\n        isPrevent = true\n        return isPrevent\n      })\n      return isPrevent\n    },\n\n    // 处理后 事件 分发\n    emitFile(newFile, oldFile) {\n      this.$emit('input-file', newFile, oldFile)\n      if (newFile && newFile.fileObject && newFile.active && (!oldFile || !oldFile.active)) {\n        this.uploading++\n        // 激活\n        this.$nextTick(function () {\n          setTimeout(() => {\n            this.upload(newFile).then(() => {\n              // eslint-disable-next-line\n              newFile = this.get(newFile)\n              if (newFile && newFile.fileObject) {\n                this.update(newFile, {\n                  active: false,\n                  success: !newFile.error\n                })\n              }\n            }).catch((e) => {\n              this.update(newFile, {\n                active: false,\n                success: false,\n                error: e.code || e.error || e.message || e\n              })\n            })\n          }, parseInt(Math.random() * 50 + 50, 10))\n        })\n      } else if ((!newFile || !newFile.fileObject || !newFile.active) && oldFile && oldFile.fileObject && oldFile.active) {\n        // 停止\n        this.uploading--\n      }\n\n      // 自动延续激活\n      if (this.active && (Boolean(newFile) !== Boolean(oldFile) || newFile.active !== oldFile.active)) {\n        this.watchActive(true)\n      }\n    },\n\n    emitInput() {\n      this.$emit('input', this.files)\n    },\n\n\n    // 上传\n    upload(id) {\n      let file = this.get(id)\n\n      // 被删除\n      if (!file) {\n        return Promise.reject('not_exists')\n      }\n\n      // 不是文件对象\n      if (!file.fileObject) {\n        return Promise.reject('file_object')\n      }\n\n      // 有错误直接响应\n      if (file.error) {\n        return Promise.reject(file.error)\n      }\n\n      // 已完成直接响应\n      if (file.success) {\n        return Promise.resolve(file)\n      }\n\n      // 后缀\n      let extensions = this.extensions\n      if (extensions && (extensions.length || typeof extensions.length === 'undefined')) {\n        if (typeof extensions !== 'object' || !(extensions instanceof RegExp)) {\n          if (typeof extensions === 'string') {\n            extensions = extensions.split(',').map(value => value.trim()).filter(value => value)\n          }\n          extensions = new RegExp('\\\\.(' + extensions.join('|').replace(/\\./g, '\\\\.') + ')$', 'i')\n        }\n        if (file.name.search(extensions) === -1) {\n          return Promise.reject('extension')\n        }\n      }\n\n      // 大小\n      if (this.size > 0 && file.size >= 0 && file.size > this.size) {\n        return Promise.reject('size')\n      }\n\n      if (this.customAction) {\n        return this.customAction(file, this)\n      }\n\n      if (this.features.html5) {\n        if (this.shouldUseChunkUpload(file)) {\n          return this.uploadChunk(file)\n        }\n        if (file.putAction) {\n          return this.uploadPut(file)\n        }\n        if (file.postAction) {\n          return this.uploadHtml5(file)\n        }\n      }\n      if (file.postAction) {\n        return this.uploadHtml4(file)\n      }\n      return Promise.reject('No action configured')\n    },\n\n    /**\n     * Whether this file should be uploaded using chunk upload or not\n     *\n     * @param Object file\n     */\n    shouldUseChunkUpload (file) {\n      return this.chunkEnabled &&\n        !!this.chunkOptions.handler &&\n        file.size > this.chunkOptions.minSize\n    },\n\n    /**\n     * Upload a file using Chunk method\n     *\n     * @param File file\n     */\n    uploadChunk (file) {\n      const HandlerClass = this.chunkOptions.handler\n      file.chunk = new HandlerClass(file, this.chunkOptions)\n\n      return file.chunk.upload()\n    },\n\n    uploadPut(file) {\n      let querys = []\n      let value\n      for (let key in file.data) {\n        value = file.data[key]\n        if (value !== null && value !== undefined) {\n          querys.push(encodeURIComponent(key) + '=' + encodeURIComponent(value))\n        }\n      }\n      let queryString = querys.length ? (file.putAction.indexOf('?') === -1 ? '?' : '&') + querys.join('&') : ''\n      let xhr = new XMLHttpRequest()\n      xhr.open('PUT', file.putAction + queryString)\n      return this.uploadXhr(xhr, file, file.file)\n    },\n\n    uploadHtml5(file) {\n      let form = new window.FormData()\n      let value\n      for (let key in file.data) {\n        value = file.data[key]\n        if (value && typeof value === 'object' && typeof value.toString !== 'function') {\n          if (value instanceof File) {\n            form.append(key, value, value.name)\n          } else {\n            form.append(key, JSON.stringify(value))\n          }\n        } else if (value !== null && value !== undefined) {\n          form.append(key, value)\n        }\n      }\n      form.append(this.name, file.file, file.file.filename || file.name)\n      let xhr = new XMLHttpRequest()\n      xhr.open('POST', file.postAction)\n      return this.uploadXhr(xhr, file, form)\n    },\n\n    uploadXhr(xhr, _file, body) {\n      let file = _file\n      let speedTime = 0\n      let speedLoaded = 0\n\n      // 进度条\n      xhr.upload.onprogress = (e) => {\n        // 还未开始上传 已删除 未激活\n        file = this.get(file)\n        if (!e.lengthComputable || !file || !file.fileObject || !file.active) {\n          return\n        }\n\n        // 进度 速度 每秒更新一次\n        let speedTime2 = Math.round(Date.now() / 1000)\n        if (speedTime2 === speedTime) {\n          return\n        }\n        speedTime = speedTime2\n\n        file = this.update(file, {\n          progress: (e.loaded / e.total * 100).toFixed(2),\n          speed: e.loaded - speedLoaded,\n        })\n        speedLoaded = e.loaded\n      }\n\n      // 检查激活状态\n      let interval = setInterval(() => {\n        file = this.get(file)\n        if (file && file.fileObject && !file.success && !file.error && file.active) {\n          return\n        }\n\n        if (interval) {\n          clearInterval(interval)\n          interval = false\n        }\n\n        try {\n          xhr.abort()\n          xhr.timeout = 1\n        } catch (e) {\n        }\n      }, 100)\n\n      return new Promise((resolve, reject) => {\n        let complete\n        let fn = (e) => {\n          // 已经处理过了\n          if (complete) {\n            return\n          }\n          complete = true\n          if (interval) {\n            clearInterval(interval)\n            interval = false\n          }\n\n          file = this.get(file)\n\n          // 不存在直接响应\n          if (!file) {\n            return reject('not_exists')\n          }\n\n          // 不是文件对象\n          if (!file.fileObject) {\n            return reject('file_object')\n          }\n\n          // 有错误自动响应\n          if (file.error) {\n            return reject(file.error)\n          }\n\n          // 未激活\n          if (!file.active) {\n            return reject('abort')\n          }\n\n\n          // 已完成 直接相应\n          if (file.success) {\n            return resolve(file)\n          }\n\n          let data = {}\n\n          switch (e.type) {\n            case 'timeout':\n            case 'abort':\n              data.error = e.type\n              break\n            case 'error':\n              if (!xhr.status) {\n                data.error = 'network'\n              } else if (xhr.status >= 500) {\n                data.error = 'server'\n              } else if (xhr.status >= 400) {\n                data.error = 'denied'\n              }\n              break\n            default:\n              if (xhr.status >= 500) {\n                data.error = 'server'\n              } else if (xhr.status >= 400) {\n                data.error = 'denied'\n              } else {\n                data.progress = '100.00'\n              }\n          }\n\n          if (xhr.responseText) {\n            let contentType = xhr.getResponseHeader('Content-Type')\n            if (contentType && contentType.indexOf('/json') !== -1) {\n              data.response = JSON.parse(xhr.responseText)\n            } else {\n              data.response = xhr.responseText\n            }\n          }\n\n          // 更新\n          file = this.update(file, data)\n\n          // 相应错误\n          if (file.error) {\n            return reject(file.error)\n          }\n\n          // 响应\n          return resolve(file)\n        }\n\n        // 事件\n        xhr.onload = fn\n        xhr.onerror = fn\n        xhr.onabort = fn\n        xhr.ontimeout = fn\n\n        // 超时\n        if (file.timeout) {\n          xhr.timeout = file.timeout\n        }\n\n        // headers\n        for (let key in file.headers) {\n          xhr.setRequestHeader(key, file.headers[key])\n        }\n\n        // 更新 xhr\n        file = this.update(file, { xhr })\n\n        // 开始上传\n        xhr.send(body)\n      })\n    },\n\n\n\n\n    uploadHtml4(_file) {\n      let file = _file\n      let onKeydown = function (e) {\n        if (e.keyCode === 27) {\n          e.preventDefault()\n        }\n      }\n\n      let iframe = document.createElement('iframe')\n      iframe.id = 'upload-iframe-' + file.id\n      iframe.name = 'upload-iframe-' + file.id\n      iframe.src = 'about:blank'\n      iframe.setAttribute('style', 'width:1px;height:1px;top:-999em;position:absolute; margin-top:-999em;')\n\n\n      let form = document.createElement('form')\n\n      form.action = file.postAction\n\n      form.name = 'upload-form-' + file.id\n\n\n      form.setAttribute('method', 'POST')\n      form.setAttribute('target', 'upload-iframe-' + file.id)\n      form.setAttribute('enctype', 'multipart/form-data')\n\n      let value\n      let input\n      for (let key in file.data) {\n        value = file.data[key]\n        if (value && typeof value === 'object' && typeof value.toString !== 'function') {\n          value = JSON.stringify(value)\n        }\n        if (value !== null && value !== undefined) {\n          input = document.createElement('input')\n          input.type = 'hidden'\n          input.name = key\n          input.value = value\n          form.appendChild(input)\n        }\n      }\n      form.appendChild(file.el)\n\n      document.body.appendChild(iframe).appendChild(form)\n\n\n\n\n      let getResponseData = function () {\n        let doc\n        try {\n          if (iframe.contentWindow) {\n            doc = iframe.contentWindow.document\n          }\n        } catch (err) {\n        }\n        if (!doc) {\n          try {\n            doc = iframe.contentDocument ? iframe.contentDocument : iframe.document\n          } catch (err) {\n            doc = iframe.document\n          }\n        }\n        if (doc && doc.body) {\n          return doc.body.innerHTML\n        }\n        return null\n      }\n\n\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          file = this.update(file, { iframe })\n\n          // 不存在\n          if (!file) {\n            return reject('not_exists')\n          }\n\n          // 定时检查\n          let interval = setInterval(() => {\n            file = this.get(file)\n            if (file && file.fileObject && !file.success && !file.error && file.active) {\n              return\n            }\n\n            if (interval) {\n              clearInterval(interval)\n              interval = false\n            }\n\n            iframe.onabort({ type: file ? 'abort' : 'not_exists' })\n          }, 100)\n\n\n          let complete\n          let fn = (e) => {\n            // 已经处理过了\n            if (complete) {\n              return\n            }\n            complete = true\n\n\n            if (interval) {\n              clearInterval(interval)\n              interval = false\n            }\n\n            // 关闭 esc 事件\n            document.body.removeEventListener('keydown', onKeydown)\n\n            file = this.get(file)\n\n            // 不存在直接响应\n            if (!file) {\n              return reject('not_exists')\n            }\n\n            // 不是文件对象\n            if (!file.fileObject) {\n              return reject('file_object')\n            }\n\n            // 有错误自动响应\n            if (file.error) {\n              return reject(file.error)\n            }\n\n            // 未激活\n            if (!file.active) {\n              return reject('abort')\n            }\n\n            // 已完成 直接相应\n            if (file.success) {\n              return resolve(file)\n            }\n\n            let response = getResponseData()\n            let data = {}\n            switch (e.type) {\n              case 'abort':\n                data.error = 'abort'\n                break\n              case 'error':\n                if (file.error) {\n                  data.error = file.error\n                } else if (response === null) {\n                  data.error = 'network'\n                } else {\n                  data.error = 'denied'\n                }\n                break\n              default:\n                if (file.error) {\n                  data.error = file.error\n                } else if (data === null) {\n                  data.error = 'network'\n                } else {\n                  data.progress = '100.00'\n                }\n            }\n\n            if (response !== null) {\n              if (response && response.substr(0, 1) === '{' && response.substr(response.length - 1, 1) === '}') {\n                try {\n                  response = JSON.parse(response)\n                } catch (err) {\n                }\n              }\n              data.response = response\n            }\n\n            // 更新\n            file = this.update(file, data)\n\n            if (file.error) {\n              return reject(file.error)\n            }\n\n            // 响应\n            return resolve(file)\n          }\n\n\n          // 添加事件\n          iframe.onload = fn\n          iframe.onerror = fn\n          iframe.onabort = fn\n\n\n          // 禁止 esc 键\n          document.body.addEventListener('keydown', onKeydown)\n\n          // 提交\n          form.submit()\n        }, 50)\n      }).then(function (res) {\n        iframe.parentNode && iframe.parentNode.removeChild(iframe)\n        return res\n      }).catch(function (res) {\n        iframe.parentNode && iframe.parentNode.removeChild(iframe)\n        return res\n      })\n    },\n\n\n\n    watchActive(active) {\n      let file\n      let index = 0\n      while ((file = this.files[index])) {\n        index++\n        if (!file.fileObject) {\n          // 不是文件对象\n        } else if (active && !this.destroy) {\n          if (this.uploading >= this.thread || (this.uploading && !this.features.html5)) {\n            break\n          }\n          if (!file.active && !file.error && !file.success) {\n            this.update(file, { active: true })\n          }\n        } else {\n          if (file.active) {\n            this.update(file, { active: false })\n          }\n        }\n      }\n      if (this.uploading === 0) {\n        this.active = false\n      }\n    },\n\n\n    watchDrop(_el) {\n      let el = _el\n      if (!this.features.drop) {\n        return\n      }\n\n      // 移除挂载\n      if (this.dropElement) {\n        try {\n          document.removeEventListener('dragenter', this.onDragenter, false)\n          document.removeEventListener('dragleave', this.onDragleave, false)\n          document.removeEventListener('drop', this.onDocumentDrop, false)\n          this.dropElement.removeEventListener('dragover', this.onDragover, false)\n          this.dropElement.removeEventListener('drop', this.onDrop, false)\n        } catch (e) {\n        }\n      }\n\n      if (!el) {\n        el = false\n      } else if (typeof el === 'string') {\n        el = document.querySelector(el) || this.$root.$el.querySelector(el)\n      } else if (el === true) {\n        el = this.$parent.$el\n      }\n\n      this.dropElement = el\n\n      if (this.dropElement) {\n        document.addEventListener('dragenter', this.onDragenter, false)\n        document.addEventListener('dragleave', this.onDragleave, false)\n        document.addEventListener('drop', this.onDocumentDrop, false)\n        this.dropElement.addEventListener('dragover', this.onDragover, false)\n        this.dropElement.addEventListener('drop', this.onDrop, false)\n      }\n    },\n\n\n    onDragenter(e) {\n      e.preventDefault()\n      if (!this.dropActive) {\n        this.dropActive = true\n      }\n    },\n\n    onDragleave(e) {\n      e.preventDefault()\n      if (e.target.nodeName === 'HTML' || (e.screenX === 0 && e.screenY === 0 && !e.fromElement && e.offsetX <= 0)) {\n        this.dropActive = false\n      }\n    },\n\n    onDragover(e) {\n      e.preventDefault()\n    },\n\n    onDocumentDrop() {\n      this.dropActive = false\n    },\n\n    onDrop(e) {\n      e.preventDefault()\n      this.addDataTransfer(e.dataTransfer)\n    },\n  }\n}\n</script>\n"],"names":["createRequest","options","xhr","XMLHttpRequest","responseType","open","method","url","headers","keys","forEach","setRequestHeader","key","body","Promise","resolve","reject","onload","status","response","onerror","send","JSON","stringify","ChunkUploadHandler","file","chunks","start","end","this","chunkSize","fileSize","push","slice","maxRetries","progress","active","stopChunks","chunksUploading","abort","startChunking","promise","Object","assign","action","startBody","fileType","then","res","_this2","sessionId","data","session_id","end_offset","createChunks","catch","i","maxActiveChunks","uploadNextChunk","hasChunksToUpload","uploadChunk","chunksToUpload","length","finish","chunk","updateFileProgress","upload","addEventListener","evt","lengthComputable","Math","round","loaded","total","FormData","name","append","uploadBody","startOffset","blob","uploaded","retries","_this3","finishBody","_this4","parseInt","maxActive","type","size","completedProgress","chunksUploaded","uploadingProgress","reduce","_this5","min","filter","CHUNK_DEFAULT_OPTIONS","ChunkUploadDefaultHandler","render","e","$destroy","$parent","addInputFile","target","constructor","$el","String","Boolean","Number","multiple","Function","Array","value","input","document","createElement","window","files","webkitdirectory","directory","features","html5","ondrop","drop","maps","$nextTick","$forceUpdate","watchDrop","destroy","fileObject","error","success","undefined","watchActive","oldMaps","id","newFile","oldFile","emitFile","emitInput","_files","index","addIndex","isArray","addFiles","Blob","webkitRelativePath","relativePath","Element","el","putAction","postAction","timeout","random","toString","substr","emitFilter","maximum","clear","newFiles","concat","splice","replace","add","dataTransfer","items","item","getAsEntry","getAsFile","webkitGetAsEntry","_this","getEntry","results","entry","path","isFile","isDirectory","dropDirectory","dirReader","createReader","readEntries","entries","id1","id2","file1","get","file2","index1","indexOf","index2","isPrevent","$emit","uploading","update","code","message","extensions","RegExp","split","map","trim","join","search","customAction","shouldUseChunkUpload","uploadPut","uploadHtml5","uploadHtml4","chunkEnabled","chunkOptions","handler","minSize","HandlerClass","querys","encodeURIComponent","queryString","uploadXhr","form","File","filename","_file","speedTime","speedLoaded","onprogress","speedTime2","Date","now","toFixed","interval","setInterval","complete","fn","responseText","contentType","getResponseHeader","parse","onabort","ontimeout","onKeydown","keyCode","preventDefault","iframe","src","setAttribute","appendChild","removeEventListener","doc","contentWindow","err","contentDocument","innerHTML","getResponseData","submit","parentNode","removeChild","thread","_el","dropElement","onDragenter","onDragleave","onDocumentDrop","onDragover","onDrop","querySelector","$root","dropActive","nodeName","screenX","screenY","fromElement","offsetX","addDataTransfer"],"mappings":"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"}